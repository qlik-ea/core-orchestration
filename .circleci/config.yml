version: 2
jobs:

  # Job for testing helm and plain kubernetes deployment of core
  kubernetes:
    machine: true
    environment:
      CHANGE_MINIKUBE_NONE_USER: true
    working_directory: ~/core
    steps:
      - checkout
      - run:
          name: Install Helm
          command: |
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh
      - run:
          name: Lint charts
          command: |
            helm lint ./kubernetes/helm/frontira
            helm lint ./kubernetes/helm/frontira/charts/engine
            helm lint ./kubernetes/helm/frontira/charts/mira
            helm lint ./kubernetes/helm/frontira/charts/license-service
      - run:
          name: Install Kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run:
          name: Install Minikube
          command: |
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: Start Minikube
          command: |
            sudo minikube start --vm-driver=none --kubernetes-version=v1.7.0
            sudo minikube update-context
      - run:
          name: Install socat (needed by helm)
          command: |
            sudo apt-get update
            sudo apt-get install socat
      - run:
          name: Install nsenter (needed by helm)
          command: |
            cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.25/util-linux-2.25.tar.gz | tar -zxf-; cd util-linux-2.25;
            sudo apt-get install autopoint autoconf libtool automake
            ./configure --without-python --disable-all-programs --enable-nsenter --without-ncurses
            sudo make nsenter; sudo cp nsenter /usr/local/bin
      - run:
          name: Add docker credentials as kubernetes secret
          command: sudo kubectl create secret docker-registry dockerhub --docker-username=$DOCKER_USER --docker-password=$DOCKER_PASSWORD --docker-email=$DOCKER_EMAIL
      - run:
          name: Helm init and wait for tiller to be running
          command: sudo helm init --debug; sudo kubectl rollout status -w deployment/tiller-deploy --namespace=kube-system;
      - run:
          name: Helm install frontira
          command: sudo helm install ./kubernetes/helm/frontira --set global.setType=NodePort --name test --debug
      - run:
          name: Check health of services
          command: |
            # Check mira health
            MIRA_URL=$(sudo minikube service test-mira --url)
            curl -fs "$MIRA_URL/v1/health"
            # Check license service health
            LICENSE_SERVICE_URL=$(sudo minikube service test-license-service --url)
            curl -fs "$LICENSE_SERVICE_URL/v1/health"
      - run:
          name: Helm delete frontira
          command: sudo helm delete test --debug
      - run:
          name: Kubernetes plain frontira
          command: sudo kubectl create -f ./kubernetes/plain/frontira/
      - run:
          name: Check health of services
          command: |
            # Check mira health
            MIRA_URL=$(sudo minikube service mira --url)
            curl -fs "$MIRA_URL/v1/health"
            # Check license service health
            LICENSE_SERVICE_URL=$(sudo minikube service license-service --url)
            curl -fs "$LICENSE_SERVICE_URL/v1/health"
      - run:
          name: Kubernetes delete frontira
          command: sudo kubectl delete -f ./kubernetes/plain/frontira/

  # Job for testing docker swarm deployment of core
  swarm:
    machine: true
    working_directory: ~/core
    steps:
      - checkout
      - run:
          name: Login to Docker
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Spin up core in a local docker swarm
          command: |
            docker swarm init
            docker stack deploy -c ./docker-swarm/docker-compose.yml --with-registry-auth core
      - run:
          name: Verify that services are healthy
          command: |
            set +e

            # Verify Mira health
            RETRIES=0
            while (( MIRA_STATUS != "200" && RETRIES != 30 )); do
              MIRA_STATUS=$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:9100/v1/health)
              sleep 2
              RETRIES=$((RETRIES + 1 ))
            done

            echo "Mira returned status code: $MIRA_STATUS"

            # Verify License-Service health
            RETRIES=0
            while (( LICENSE_STATUS != "200" && RETRIES != 30 )); do
              LICENSE_STATUS=$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:9200/v1/health)
              sleep 2
              RETRIES=$((RETRIES + 1 ))
            done

            echo "License-Service returned status code: $LICENSE_STATUS"

            # Verify QIX Engine health
            while (( ENGINE_STATUS != "200" && RETRIES != 30 )); do
              ENGINE_STATUS=$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:9076/healthcheck)
              sleep 2
              RETRIES=$((RETRIES + 1 ))
            done

            echo "Engine returned status code: $ENGINE_STATUS"

            if [[ "$MIRA_STATUS" != "200" || "$LICENSE_STATUS" != "200" || "$ENGINE_STATUS" != "200" ]]; then
              echo "All services did not return status code 200 on health endpoints"
              exit 1
            fi
      - run:
          name: Remove deployment and leave swarm
          command: |
            docker stack rm core
            docker swarm leave --force

  # Job for testing nomad deployment of core
  nomad:
    machine: true
    working_directory: ~/core
    steps:
      - checkout
      - run:
          name: Login to Docker
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Install Consul
          command: |
            curl -Lo consul.zip https://releases.hashicorp.com/consul/1.0.0/consul_1.0.0_linux_amd64.zip
            unzip -d consul-unzip consul.zip
            chmod +x consul-unzip/consul
            sudo mv consul-unzip/consul /usr/local/bin/
      - run:
          name: Start Consul server
          command: sudo consul agent -dev -client=0.0.0.0 -dns-port=53 -recursor=8.8.8.8
          background: true
      - run:
          name: Install Nomad
          command: |
            curl -Lo nomad.zip https://releases.hashicorp.com/nomad/0.6.3/nomad_0.6.3_linux_amd64.zip
            unzip -d nomad-unzip nomad.zip
            chmod +x nomad-unzip/nomad
            sudo mv nomad-unzip/nomad /usr/local/bin/
      - run:
          name: Start Nomad server
          command: sudo nomad agent -dev -config=./nomad/nomad.hcl
          background: true
      - run:
          name: Deploy Core to Nomad
          command: |
            # Let the nomad agent have some time to start
            sleep 5

            # Deploy services
            sudo nomad run ./nomad/mira.nomad
            sudo nomad run ./nomad/license-service.nomad
            sudo nomad run ./nomad/engine.nomad
      - run:
          name: Check health of Core services
          command: |
            set +e
            # Wait for Mira to be up and running
            while [ "$CONTAINER_ID" == "" ]; do
              CONTAINER_ID=$(sudo docker ps -aqf "name=mira")
              sleep 1
            done
            echo "Mira is up and running!"

            # Check Mira health
            MIRA_URL=$(sudo docker port "$CONTAINER_ID" 9100)
            curl -fs "$MIRA_URL/v1/health"

            # Check that Mira returns correct number of qix engines
            RETRIES=0
            while (( NBR_ENGINES != "2" && RETRIES != 30 )); do
              NBR_ENGINES=$(curl "$MIRA_URL/v1/engines" | grep -o \"metricsPort\" | wc -w)
              echo "Mira returned $NBR_ENGINES qix engines"
              sleep 2
              RETRIES=$((RETRIES + 1 ))
            done
            if [ "$NBR_ENGINES" != "2" ]; then
              echo "Incorrect number of qix engines found"
              exit 1
            fi

workflows:
  version: 2
  kubernetes_swarm_and_nomad:
    jobs:
      - kubernetes
      - swarm
      - nomad
